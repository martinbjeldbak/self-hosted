---
version: "3.9"

x-env: &env
  PUID: ${PUID}
  PGID: ${PGID}
  TZ: ${TZ}

services:
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    ports:
      - 53:53/tcp # plain DNS
      - 53:53/udp # plain DNS
    networks:
      macvlan:
        ipv4_address: 192.168.1.200
      vlan_bridge:
        ipv4_address:  172.20.0.200
    environment:
      <<: *env
    volumes:
      - ${DOCKER_CONF_DIR}/adguardhome/work:/opt/adguardhome/work
      - ${DOCKER_CONF_DIR}/adguardhome/conf:/opt/adguardhome/conf
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    ports:
      # Homekit ports https://www.home-assistant.io/integrations/homekit/#firewall
      - "5353:5353"
      - "21063:21063"
    expose:
      - 8123 # UI
    networks:
      - vlan_bridge
    dns: 172.20.0.200 # IP Address of adguardhome - can't get it to resolve otherwise. https://serverfault.com/a/1033495
    environment:
      <<: *env
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: always

  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    network_mode: "service:gluetun"
    environment:
      <<: *env
      AUTO_UPDATE: 'true'
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/jackett/config:/config
      - ${DOCKER_TORRENTS_DIR}/watch:/downloads

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    restart: unless-stopped
    ports:
      #- 1900:1900/udp   # access to the Plex DLNA Server # NOTE: already in use
      - 32400:32400/tcp # access to the Plex Media Server
      - 32410:32410/udp # current GDM network discovery
      - 32412:32412/udp # current GDM network discovery
      - 32413:32413/udp # current GDM network discovery
      - 32414:32414/udp # current GDM network discovery
      - 32469:32469/tcp # access to the Plex DLNA Server
    networks:
      - vlan_bridge
    environment:
      VERSION: docker
      PLEX_CLAIM: ${PLEX_CLAIM}
      <<: *env
    volumes:
      - ${DOCKER_CONF_DIR}/plex/database:/config
      - ${DOCKER_CONF_DIR}/plex/transcode:/transcode
      - ${DOCKER_MEDIA_DIR}:/data
    devices:
      - /dev/dri:/dev/dri # Synology w/ Intel CPU for hardware encoding

  # NOTE: this is a once-off task and runs using cron in synology "Tasks" section
  plextraktsync:
    image: ghcr.io/taxel/plextraktsync:0.26
    command: sync
    container_name: plextraktsync
    networks:
      - vlan_bridge
    volumes:
      - ${DOCKER_CONF_DIR}/plextraktsync:/app/config
    depends_on:
      - plex
    environment:
      <<: *env

  # NOTE: this is a once-off task and runs using cron in synology "Tasks" section
  plex-meta-manager:
    image: meisnate12/plex-meta-manager
    command: --run
    networks:
      - vlan_bridge
    container_name: plex-meta-manager
    restart: "no"
    environment:
      PMM_NO_MISSING: 'true'
    volumes:
      - ${DOCKER_CONF_DIR}/plex-meta-manager:/config
    depends_on:
      - plex

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    expose:
      - 7878
    restart: unless-stopped
    networks:
      - vlan_bridge
    environment:
      <<: *env
    volumes:
      - ${DOCKER_CONF_DIR}/radarr:/config
      - ${DOCKER_DATA_DIR}:/data

  # lidarr makes so many DNS requests - going to disable as mostly unused anyway
  # lidarr:
  #   image: ghcr.io/linuxserver/lidarr
  #   networks:
  #     - vlan_bridge
  #   container_name: lidarr
  #   expose:
  #     - 8686
  #   restart: unless-stopped
  #   environment:
  #     <<: *env
  #   volumes:
  #     - ${DOCKER_CONF_DIR}/lidarr:/config
  #     - ${DOCKER_DATA_DIR}:/data

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    networks:
      - vlan_bridge
    container_name: sonarr
    expose:
      - 8989
    environment:
      <<: *env
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/sonarr:/config
      - ${DOCKER_DATA_DIR}:/data

  tautulli:
    image: tautulli/tautulli
    networks:
      - vlan_bridge
    container_name: tautulli
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/tautulli:/config
    environment:
      <<: *env
    expose:
      - 8181

  bazarr:
    image: ghcr.io/linuxserver/bazarr
    networks:
      - vlan_bridge
    container_name: bazarr
    environment:
      <<: *env
    expose:
      - 6767
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/bazarr:/config
      - ${DOCKER_MEDIA_DIR}:/data/media

  gluetun:
    image: qmcgaw/gluetun
    networks:
      - vlan_bridge
    container_name: gluetun
    restart: unless-stopped
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${DOCKER_CONF_DIR}/gluetun:/gluetun
    environment:
      VPN_SERVICE_PROVIDER: mullvad
      VPN_TYPE: wireguard
      WIREGUARD_PRIVATE_KEY: ${GLUETUN_WIREGUARD_PRIVATE_KEY}
      WIREGUARD_ADDRESSES: ${GLUETUN_WIREGUARD_ADDRESSES}
      SERVER_CITIES: ${GLUETUN_CITIES}
      DOT: 'off' # turn off local unbound in favor of adguardhome
      # DNS_ADDRESS: 172.20.0.200 # TODO: try disable this and DNS_KEEP_NAMESERVER on, see https://github.com/qdm12/gluetun-wiki/blob/3c3cfccf06045767d50d58efae22fbafe95b2ab2/setup/options/dns.md?plain=1#L9
      DNS_KEEP_NAMESERVER: on
      <<: *env
    expose:
      - 9091 # transmission UI
      - 9117 # jackett UI
      - 8191 # flaresolverr

  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      USER: ${TRANSMISSION_USERNAME}
      PASS: ${TRANSMISSION_PASSWORD}
      <<: *env
    volumes:
      - ${DOCKER_CONF_DIR}/transmission:/config
      - ${DOCKER_TORRENTS_DIR}:/data/downloads/torrents
      - ${DOCKER_TORRENTS_DIR}/watch:/watch

  caddy:
    build:
      context: .
      dockerfile: caddy.Dockerfile
      network: host
    container_name: caddy
    ports:
      - 443:443
      - 80:80
    networks:
      - vlan_bridge
    restart: unless-stopped
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      NAS_IP: ${STATIC_IP}
      TLS_EMAIL: ${CADDY_TLS_EMAIL}
      <<: *env
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ${DOCKER_CONF_DIR}/caddy/config:/config
      - ${DOCKER_CONF_DIR}/caddy/data:/data
    healthcheck:
      test: ["CMD", "caddy", "version"]

  # unpackerr:
  #   image: golift/unpackerr
  #   networks:
  #     - vlan_bridge
  #   container_name: unpackerr
  #   volumes:
  #     - ${DOCKER_DOWNLOADS_DIR}:/data/downloads
  #   restart: always
  #   user: ${PUID}:${PGID}
  #   environment:
  #     <<: *env
  #     # Sonarr config
  #     UN_SONARR_0_URL: http://sonarr:8989
  #     UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
  #     UN_SONARR_0_PATHS_0: /data/downloads/torrents/completed

  #     # Radarr config
  #     UN_RADARR_0_URL: http://radarr:7878
  #     UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
  #     UN_RADARR_0_PATHS_0: /data/downloads/torrents/completed

  #     # Lidarr config
  #     UN_LIDARR_0_URL: http://lidarr:8686
  #     UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
  #     UN_LIDARR_0_PATHS_0: /data/downloads/torrents/completed
  #   security_opt:
  #     - no-new-privileges:true

  watchtower:
    image: containrrr/watchtower
    networks:
      - vlan_bridge
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: ${DISCORD_NOTIFICATION_URL}
      WATCHTOWER_MONITOR_ONLY: 'true'
    command: --schedule "0 0 3 * * ?" # run at 3am

  db:
    image: postgres:14.6-alpine
    container_name: postgres
    restart: always
    volumes:
      - ${DOCKER_CONF_DIR}/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - vlan_bridge

  huginn:
    build:
      context: .
      dockerfile: huginn.Dockerfile
      network: host
    container_name: huginn
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - vlan_bridge
    environment:
      TIMEZONE: ${HUGINN_TIMEZONE}
      EMAIL_FROM_ADDRESS: ${HUGINN_EMAIL_FROM_ADDRESS}
      SMTP_DOMAIN: ${HUGINN_SMTP_DOMAIN}
      SMTP_PASSWORD: ${HUGINN_SMTP_PASSWORD}
      INVITATION_CODE: ${HUGINN_INVITATION_CODE}
      SMTP_USER_NAME: ${SMTP_USER_NAME}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: 465
      SMTP_SSL: 'true'
      SMTP_AUTHENTICATION: plain
      ENABLE_INSECURE_AGENTS: 'true' # trust all users
      DATABASE_ADAPTER: postgresql
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_HOST: db
    depends_on:
      - db

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    networks:
      - vlan_bridge
    container_name: heimdall
    restart: unless-stopped
    expose:
      - 80
    environment:
      <<: *env
    volumes:
      - ${DOCKER_CONF_DIR}/heimdall:/config

  wireguard:
    image: ghcr.io/linuxserver/wireguard
    networks:
      - vlan_bridge
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    restart: unless-stopped
    environment:
      <<: *env
      SERVERURL: ${WIREGUARD_SERVER_URL}
      SERVERPORT: 51820
      PEERS: ${WIREGUARD_PEERS}
    volumes:
      - ${DOCKER_CONF_DIR}/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp

  unificontroller:
    image: ghcr.io/linuxserver/unifi-controller:latest
    container_name: unificontroller
    restart: unless-stopped
    networks:
      - vlan_bridge
    environment:
      <<: *env
    expose:
      - 8443
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      # - 1900:1900/udp #optional # Required for Make controller discoverable on L2 network option. NOTE: already in use
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    volumes:
      - ${DOCKER_CONF_DIR}/unifi-controller:/config

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr
    container_name: flaresolverr
    network_mode: "service:gluetun"
    restart: unless-stopped
    environment:
      TZ: ${TZ}

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    restart: unless-stopped
    user: ${PUID}:${PGID}
    networks:
      - vlan_bridge
    volumes:
      - ${DOCKER_CONF_DIR}/recyclarr:/config
    environment:
      <<: *env
      RECYCLARR_CREATE_CONFIG: "true"
      CRON_SCHEDULE: "@daily"

  # https://community.home-assistant.io/t/using-homekit-component-inside-docker/45409/41
  mdns-repeater:
    container_name: mdns_repeater
    image: angelnu/mdns_repeater
    network_mode: host
    environment:
      hostNIC: eth0
      dockerNIC: docker-a5e9846c

  # speedtest:
  #   image: adolfintel/speedtest
  #   container_name: speedtest
  #   restart: unless-stopped
  #   networks:
  #     - vlan_bridge
  #   environment:
  #     <<: *env
  #     TITLE: Martin's SpeedTest
  #     PASSWORD: 1234
  #     WEBPORT: 8445
  #   expose:
  #     - 8445

networks:
  macvlan:
    name: docker_macvlan
    driver: macvlan
    enable_ipv6: false
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.1
  vlan_bridge:
    name: docker_vlan_bridge
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.20.0.0/24 # subnet for all containers
          gateway: 172.20.0.1
