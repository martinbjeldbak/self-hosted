---
version: "3.1"

services:
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    ports:
      - 53:53/tcp # plain DNS
      - 53:53/udp # plain DNS
    expose:
      - 3000 # UI
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONF_DIR}/adguardhome/work:/opt/adguardhome/work
      - ${DOCKER_CONF_DIR}/adguardhome/conf:/opt/adguardhome/conf
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    expose:
      - 8123
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: always

  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true
    expose:
      - 9117
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/jackett/config:/config
      - /volume1/data/downloads:/downloads

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    restart: unless-stopped
    ports:
      #- 1900:1900/udp   # access to the Plex DLNA Server # NOTE: already in use
      - 32400:32400/tcp # access to the Plex Media Server
      - 32410:32410/udp # current GDM network discovery
      - 32412:32412/udp # current GDM network discovery
      - 32413:32413/udp # current GDM network discovery
      - 32414:32414/udp # current GDM network discovery
      - 32469:32469/tcp # access to the Plex DLNA Server
    expose:
      - 32400 # access to the Plex Media Server
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ${DOCKER_CONF_DIR}/plex/database:/config
      - ${DOCKER_CONF_DIR}/plex/transcode:/transcode
      - /volume1/data/media:/data
    devices:
      - /dev/dri:/dev/dri # Synology w/ Intel CPU for hardware encoding

  # NOTE: this is a once-off task and runs using cron
  plextraktsync:
    image: ghcr.io/taxel/plextraktsync
    container_name: plextraktsync
    volumes:
      - ${DOCKER_CONF_DIR}/plextraktsync:/app/config
    depends_on:
      - plex

  plex-meta-manager:
    image: meisnate12/plex-meta-manager
    container_name: plex-meta-manager
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PMM_TIME=02:00,15:00
    volumes:
      - ${DOCKER_CONF_DIR}/plex-meta-manager:/config
    depends_on:
      - plex

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    expose:
      - 7878
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_CONF_DIR}/radarr:/config
      - /volume1/data/:/data

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    expose:
      - 8989
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/sonarr:/config
      - /volume1/data/:/data

  tautulli:
    image: tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/tautulli:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    expose:
      - 8181

  bazarr:
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    expose:
      - 6767
    restart: unless-stopped
    volumes:
      - ${DOCKER_CONF_DIR}/bazarr:/config
      - /volume1/data/media:/data/media

  transmission:
    image: haugene/transmission-openvpn
    container_name: transmission
    cap_add:
      - net_admin # required to modify network intrfaces
    sysctls:
      # see https://haugene.github.io/docker-transmission-openvpn/provider-specific/#mullvad
      - net.ipv6.conf.all.disable_ipv6=0
    environment:
      - OPENVPN_PROVIDER=MULLVAD
      - OPENVPN_USERNAME=${MULLVAD_USERNAME}
      - OPENVPN_PASSWORD=m
      - OPENVPN_CONFIG=au_mel
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - LOCAL_NETWORK=192.168.1.0/24
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_USERNAME}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_PASSWORD}
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_DOWNLOAD_DIR=/data/downloads/torrents/completed
      - TRANSMISSION_INCOMPLETE_DIR=/data/downloads/torrents/incomplete
      - TRANSMISSION_WATCH_DIR=/data/downloads/torrents/watch
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${DOCKER_CONF_DIR}/transmission-openvpn:/data/transmission-home
      - /volume1/data/downloads/torrents:/data/downloads/torrents
    dns:
      - 1.1.1.1
      - 1.0.0.1
    expose:
      - 9091

  caddy:
    build:
      context: .
      dockerfile: caddy.Dockerfile
    container_name: caddy
    ports:
      - 4443:443
    restart: unless-stopped
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - SITE_ADDRESS=${CADDY_HOSTNAME}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ${DOCKER_CONF_DIR}/caddy/config:/config
      - ${DOCKER_CONF_DIR}/caddy/data:/data
    healthcheck:
      test: ["CMD", "caddy", "version"]

  # portainer:
  #   image: portainer/portainer-ce
  #   container_name: portainer
  #   restart: unless-stopped
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${DOCKER_CONF_DIR}/portainer:/data
  #   expose:
  #     - 9000
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}

  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      - /volume1/data/downloads:/data/downloads
    restart: always
    user: ${PUID}:${PGID}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

      # Sonarr config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_SONARR_0_PATHS_0=/data/downloads/torrents/completed

      # Radarr config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
      - UN_RADARR_0_PATHS_0=/data/downloads/torrents/completed

    security_opt:
      - no-new-privileges:true

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      - /etc/localtime:/etc/localtime:ro
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${DISCORD_NOTIFICATION_URL}
      - WATCHTOWER_MONITOR_ONLY=true
    command: --schedule "0 0 3 * * ?" # run at 3am

  db:
    image: postgres:14.2-alpine
    container_name: postgres
    restart: always
    volumes:
      - ${DOCKER_CONF_DIR}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  huginn:
    build:
      context: .
      dockerfile: huginn.Dockerfile
    container_name: huginn
    restart: always
    expose:
      - 3000
    environment:
      - TIMEZONE=${HUGINN_TIMEZONE}
      - EMAIL_FROM_ADDRESS=${HUGINN_EMAIL_FROM_ADDRESS}
      - SMTP_DOMAIN=${HUGINN_SMTP_DOMAIN}
      - SMTP_PASSWORD=${HUGINN_SMTP_PASSWORD}
      - INVITATION_CODE=${HUGINN_INVITATION_CODE}
      - SMTP_USER_NAME=${SMTP_USER_NAME}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=465
      - SMTP_SSL=true
      - SMTP_AUTHENTICATION=plain
      - ENABLE_INSECURE_AGENTS=true # trust all users
      #- SCHEDULER_FREQUENCY=1
      - DATABASE_ADAPTER=postgresql
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_HOST=db
    depends_on:
      - db
